const { autoUpdater } = require('electron-updater');
const { dialog, BrowserWindow } = require('electron');

class AutoUpdaterManager {
  constructor() {
    this.setupAutoUpdater();
  }

  setupAutoUpdater() {
    console.log('üîÑ Configurando auto-updater...');

    try {
      // Configurar reposit√≥rio GitHub para updates
      const feedConfig = {
        provider: 'github',
        owner: 'rbravo',
        repo: 'flex-navigator',
        private: false
      };
      
      console.log('üì° Configurando feed URL:', feedConfig);
      autoUpdater.setFeedURL(feedConfig);
      
      // Configurar autoUpdater
      autoUpdater.autoDownload = false; // N√£o baixar automaticamente
      autoUpdater.autoInstallOnAppQuit = false; // N√£o instalar automaticamente
      
      console.log('‚öôÔ∏è AutoUpdater configurado - autoDownload:', autoUpdater.autoDownload);
      
    } catch (error) {
      console.error('‚ùå Erro ao configurar autoUpdater:', error);
      this.sendToRenderer('update-error', `Erro de configura√ß√£o: ${error.message}`);
    }

    // Event listeners para auto-updater
    autoUpdater.on('checking-for-update', () => {
      console.log('üîç Verificando por atualiza√ß√µes...');
      this.sendToRenderer('update-checking');
    });

    autoUpdater.on('update-available', (info) => {
      console.log('‚úÖ Atualiza√ß√£o dispon√≠vel:', info);
      this.sendToRenderer('update-available', info);
      this.showUpdateAvailableDialog(info);
    });

    autoUpdater.on('update-not-available', (info) => {
      console.log('‚ùå Nenhuma atualiza√ß√£o dispon√≠vel:', info);
      this.sendToRenderer('update-not-available', info);
    });

    autoUpdater.on('error', (err) => {
      console.log('‚ùå Erro no auto-updater:', err);
      console.log('‚ùå Detalhes do erro:', {
        message: err.message,
        stack: err.stack,
        name: err.name
      });
      
      // Enviar erro mais detalhado para o renderer
      const errorMessage = err.message || 'Erro desconhecido no auto-updater';
      this.sendToRenderer('update-error', errorMessage);
      
      // Mostrar di√°logo apenas se n√£o for erro de rede comum
      if (!err.message.includes('net::')) {
        this.showErrorDialog(err);
      }
    });

    autoUpdater.on('download-progress', (progressObj) => {
      let log_message = "Velocidade de download: " + progressObj.bytesPerSecond;
      log_message = log_message + ' - Baixado ' + progressObj.percent + '%';
      log_message = log_message + ' (' + progressObj.transferred + "/" + progressObj.total + ')';
      console.log(log_message);
      this.sendToRenderer('update-download-progress', progressObj);
    });

    autoUpdater.on('update-downloaded', (info) => {
      console.log('‚úÖ Atualiza√ß√£o baixada:', info);
      this.sendToRenderer('update-downloaded', info);
      this.showUpdateDownloadedDialog(info);
    });
  }

  sendToRenderer(channel, data = null) {
    const windows = BrowserWindow.getAllWindows();
    windows.forEach(window => {
      if (window && window.webContents) {
        window.webContents.send(channel, data);
      }
    });
  }

  async showUpdateAvailableDialog(info) {
    // Verificar se o auto-download est√° habilitado
    const { isAutoDownloadEnabled } = require('../../utils/userSettings');
    
    const result = await dialog.showMessageBox({
      type: 'info',
      title: 'Atualiza√ß√£o Dispon√≠vel',
      message: `Uma nova vers√£o (${info.version}) est√° dispon√≠vel!`,
      detail: `Vers√£o atual: ${require('../../../package.json').version}\nNova vers√£o: ${info.version}\n\nDeseja baixar e instalar automaticamente?`,
      buttons: ['Sim, baixar agora', 'N√£o, talvez depois'],
      defaultId: 0,
      cancelId: 1
    });

    if (result.response === 0) {
      autoUpdater.downloadUpdate();
    }
  }

  async showUpdateDownloadedDialog(info) {
    const result = await dialog.showMessageBox({
      type: 'info',
      title: 'Atualiza√ß√£o Baixada',
      message: 'A atualiza√ß√£o foi baixada com sucesso!',
      detail: `A nova vers√£o (${info.version}) foi baixada e est√° pronta para ser instalada.\n\nO aplicativo ser√° reiniciado para aplicar a atualiza√ß√£o.`,
      buttons: ['Reiniciar Agora', 'Reiniciar Depois'],
      defaultId: 0,
      cancelId: 1
    });

    if (result.response === 0) {
      autoUpdater.quitAndInstall();
    }
  }

  showErrorDialog(error) {
    const errorMsg = `Ocorreu um erro ao verificar atualiza√ß√µes:\n\n${error.message}\n\nDetalhes t√©cnicos:\n${error.stack || 'N√£o dispon√≠vel'}`;
    dialog.showErrorBox('Erro na Atualiza√ß√£o', errorMsg);
  }

  async checkForUpdates() {
    console.log('üîÑ Verificando por atualiza√ß√µes manualmente...');
    try {
      console.log('üì° Iniciando verifica√ß√£o manual...');
      const result = await autoUpdater.checkForUpdatesAndNotify();
      console.log('‚úÖ Verifica√ß√£o manual conclu√≠da:', result);
      return result;
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o manual:', error);
      this.sendToRenderer('update-error', `Erro na verifica√ß√£o: ${error.message}`);
      throw error;
    }
  }

  async checkForUpdatesAndNotify() {
    console.log('üîÑ Verificando por atualiza√ß√µes automaticamente...');
    try {
      console.log('üì° Iniciando verifica√ß√£o autom√°tica...');
      const result = await autoUpdater.checkForUpdatesAndNotify();
      console.log('‚úÖ Verifica√ß√£o autom√°tica conclu√≠da:', result);
      return result;
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o autom√°tica:', error);
      this.sendToRenderer('update-error', `Erro na verifica√ß√£o: ${error.message}`);
      // N√£o lan√ßar erro para verifica√ß√£o autom√°tica
      return null;
    }
  }
}

module.exports = { AutoUpdaterManager };
